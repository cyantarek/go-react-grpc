{"ast":null,"code":"import { FETCH_TODO, SET_LOADING } from \"./types\";\n\nconst {\n  HelloServiceClient\n} = require(\"../api/hello/hello_service_grpc_web_pb\");\n\nconst {\n  HelloRequest\n} = require(\"../api/hello/hello_service_pb\");\n\nlet helloClient = new HelloServiceClient(\"http://localhost:9090\", null, null);\nexport const setLoading = value => {\n  return dispatch => {\n    dispatch({\n      action: SET_LOADING,\n      payload: value\n    });\n  };\n};\n\nconst {\n  TodoServiceClient\n} = require(\"../api/todo/todo_service_grpc_web_pb\");\n\nconst {\n  TodoRequest,\n  CommonRequest\n} = require(\"../api/todo/todo_service_pb\");\n\nlet todoClient = new TodoServiceClient(\"http://localhost:9090\", null, null);\nexport const fetchTodo = () => {\n  return dispatch => {\n    setLoading(true);\n    let data = fetchTodoFunc();\n    console.log(data);\n    dispatch({\n      type: FETCH_TODO,\n      payload: data\n    });\n    setLoading(false);\n  };\n};\nexport const fetchTodoFunc = () => {\n  let req = new CommonRequest();\n  todoClient.getAllTodo(req, {}, (err, resp) => {\n    if (resp == null) {\n      console.log(err);\n    } else {\n      return resp.toObject().todoListList;\n    }\n  });\n};\nexport const createTodo = data => {\n  return dispatch => {\n    let req = new TodoRequest();\n    req.setTask(data.task);\n    setLoading(true);\n    todoClient.createTodo(req, {}, (err, resp) => {\n      if (resp == null) {\n        console.log(err);\n      } else {\n        setLoading(true);\n        let data = fetchTodoFunc();\n        dispatch({\n          type: FETCH_TODO,\n          payload: data\n        });\n        setLoading(false);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/cyan/Desktop/projects/go-grpc-react-todo/frontend/src/actions/index.js"],"names":["FETCH_TODO","SET_LOADING","HelloServiceClient","require","HelloRequest","helloClient","setLoading","value","dispatch","action","payload","TodoServiceClient","TodoRequest","CommonRequest","todoClient","fetchTodo","data","fetchTodoFunc","console","log","type","req","getAllTodo","err","resp","toObject","todoListList","createTodo","setTask","task"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,WAApB,QAAsC,SAAtC;;AAEA,MAAM;AAACC,EAAAA;AAAD,IAAuBC,OAAO,CAAC,wCAAD,CAApC;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAiBD,OAAO,CAAC,+BAAD,CAA9B;;AAEA,IAAIE,WAAW,GAAG,IAAIH,kBAAJ,CAAuB,uBAAvB,EAAgD,IAAhD,EAAsD,IAAtD,CAAlB;AAEA,OAAO,MAAMI,UAAU,GAAIC,KAAD,IAAW;AACnC,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,MAAM,EAAER,WAAT;AAAsBS,MAAAA,OAAO,EAAEH;AAA/B,KAAD,CAAR;AACH,GAFD;AAGD,CAJM;;AAMP,MAAM;AAACI,EAAAA;AAAD,IAAsBR,OAAO,CAAC,sCAAD,CAAnC;;AACA,MAAM;AAACS,EAAAA,WAAD;AAAcC,EAAAA;AAAd,IAA+BV,OAAO,CAAC,6BAAD,CAA5C;;AAEA,IAAIW,UAAU,GAAG,IAAIH,iBAAJ,CAAsB,uBAAtB,EAA+C,IAA/C,EAAqD,IAArD,CAAjB;AAEA,OAAO,MAAMI,SAAS,GAAG,MAAM;AAC3B,SAAOP,QAAQ,IAAI;AACfF,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,QAAIU,IAAI,GAAGC,aAAa,EAAxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAR,IAAAA,QAAQ,CAAC;AAACY,MAAAA,IAAI,EAAEpB,UAAP;AAAmBU,MAAAA,OAAO,EAAEM;AAA5B,KAAD,CAAR;AAEAV,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GARD;AASH,CAVM;AAYP,OAAO,MAAMW,aAAa,GAAG,MAAM;AAC/B,MAAII,GAAG,GAAG,IAAIR,aAAJ,EAAV;AAEAC,EAAAA,UAAU,CAACQ,UAAX,CAAsBD,GAAtB,EAA2B,EAA3B,EAA+B,CAACE,GAAD,EAAMC,IAAN,KAAe;AAC1C,QAAIA,IAAI,IAAI,IAAZ,EAAkB;AACdN,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACH,KAFD,MAEM;AACF,aAAOC,IAAI,CAACC,QAAL,GAAgBC,YAAvB;AACH;AACJ,GAND;AAOH,CAVM;AAYP,OAAO,MAAMC,UAAU,GAAIX,IAAD,IAAU;AAChC,SAAOR,QAAQ,IAAI;AACf,QAAIa,GAAG,GAAG,IAAIT,WAAJ,EAAV;AAEAS,IAAAA,GAAG,CAACO,OAAJ,CAAYZ,IAAI,CAACa,IAAjB;AAEAvB,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEAQ,IAAAA,UAAU,CAACa,UAAX,CAAsBN,GAAtB,EAA2B,EAA3B,EAA+B,CAACE,GAAD,EAAMC,IAAN,KAAe;AAC1C,UAAIA,IAAI,IAAI,IAAZ,EAAkB;AACdN,QAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACH,OAFD,MAEM;AACFjB,QAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAIU,IAAI,GAAGC,aAAa,EAAxB;AACAT,QAAAA,QAAQ,CAAC;AAACY,UAAAA,IAAI,EAAEpB,UAAP;AAAmBU,UAAAA,OAAO,EAAEM;AAA5B,SAAD,CAAR;AAEAV,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAXD;AAYH,GAnBD;AAoBH,CArBM","sourcesContent":["import {FETCH_TODO, SET_LOADING} from \"./types\";\n\nconst {HelloServiceClient} = require(\"../api/hello/hello_service_grpc_web_pb\");\nconst {HelloRequest} = require(\"../api/hello/hello_service_pb\");\n\nlet helloClient = new HelloServiceClient(\"http://localhost:9090\", null, null);\n\nexport const setLoading = (value) => {\n  return dispatch => {\n      dispatch({action: SET_LOADING, payload: value})\n  }\n};\n\nconst {TodoServiceClient} = require(\"../api/todo/todo_service_grpc_web_pb\");\nconst {TodoRequest, CommonRequest} = require(\"../api/todo/todo_service_pb\");\n\nlet todoClient = new TodoServiceClient(\"http://localhost:9090\", null, null);\n\nexport const fetchTodo = () => {\n    return dispatch => {\n        setLoading(true);\n\n        let data = fetchTodoFunc();\n        console.log(data);\n        dispatch({type: FETCH_TODO, payload: data});\n\n        setLoading(false);\n    }\n};\n\nexport const fetchTodoFunc = () => {\n    let req = new CommonRequest();\n\n    todoClient.getAllTodo(req, {}, (err, resp) => {\n        if (resp == null) {\n            console.log(err)\n        }else {\n            return resp.toObject().todoListList;\n        }\n    })\n};\n\nexport const createTodo = (data) => {\n    return dispatch => {\n        let req = new TodoRequest();\n\n        req.setTask(data.task);\n\n        setLoading(true);\n\n        todoClient.createTodo(req, {}, (err, resp) => {\n            if (resp == null) {\n                console.log(err)\n            }else {\n                setLoading(true);\n\n                let data = fetchTodoFunc();\n                dispatch({type: FETCH_TODO, payload: data});\n\n                setLoading(false);\n            }\n        });\n    }\n};"]},"metadata":{},"sourceType":"module"}